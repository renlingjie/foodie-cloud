#1、端口
server:
 port: 10003  # 微服务注意：后续要启动很多端口，这里就从10001开始
#2、数据源改动
spring:
  datasource:
    # 数据源的相关配置(微服务注意：每个服务都应该有对应的数据源)
    url: ${mariadb.url}
    password: ${mariadb.password}
    username: ${mariadb.username}
  redis:
    database: 1   #database数量，16以内，默认是0
    host: localhost   #我们所使用的Redis所在的主机地址，这虚拟机的，若是我们的本机那就是127.0.0.1  可以用虚拟机的192.168.218.22
    port: 6379
    timeout: 500

#3、开发环境我们的日志打印照旧
mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #在控制台输出日志的实现
#4、开启actuator，暴露信息以供hystrix的turbine接收(已经在Gitee配置中心上配置)

#5、Feign集成Hystrix需要的配置，设置为true，表示Feign接口上的Hystrix开启降级熔断
feign:
  hystrix:
    enabled: true

#6、不能所有的配置都写在@HystrixCommand中，一些全局的配置，可以放在配置文件中
hystrix:
  command:
    # 1、全局hystrix配置
    default:
      fallback:          #开启降级功能
        enabled: true
      circuitBreaker:    #开启熔断功能
        enabled: true
        requestVolumeThreshold: 5             #若在下main配置的熔断时间窗口中的请求达到5个，开启熔断判断
        errorThresholdPercentage: 30          #判断时，超过30%错误，熔断正式打开
        sleepWindowInMilliseconds: 20000      #开启熔断20s之后，进入半开状态
        #forceClosed/forceOpen  强制关闭/开启熔断，默认均为false
      execution:
        timeout:
          enabled: true
          #可以指定隔离方式是线程池还是信号量(默认使用线程池)
        isolation:
          thread:
            interruptOnTimeout: true       #超时的时候是否关闭线程池/信号量
            interruptOnFutureCancel: true  #取消的时候否关闭线程池/信号量
            timeoutInMilliseconds: 10000   #超时引起降级的触发时间，一般大于Ribbon执行重试机制后的时间
      metrics:
        rollingStatus:
          timeInMilliseconds: 20000    #熔断的时间窗口
          #numBuckets: 10
